# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Article {
  _id: String!
  title: String!
  imageUrl: String
  content: String
  isFeatured: Boolean
  viewedCount: Float!
  updatedAt: DateTime!
  createdAt: DateTime!
  topicId: Topic!
  tags: [String!]
  taggedArticles(query: ArticleQueryInput!): SearchResult
}

input ArticleFilterInputDto {
  _id: String
  topicId: String
  isFeatured: Boolean
}

input ArticleInput {
  topicId: String!
  title: String!
  content: String
  isFeatured: Boolean
}

input ArticleQueryInput {
  filter: ArticleFilterInputDto = {}
  sortBy: ArticleSortBy = {}
  pageNum: Float = 1
  pageSize: Float = 10
}

input ArticleSortBy {
  title: SortBy
  createdAt: SortBy
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type LoginRecord {
  _id: String!
  country: String!
  city: String!
  region: String!
  lat: Float!
  long: Float!
  ip: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type LoginReturnDto {
  expiresIn: String!
  accessToken: String!
  roles: [Role!]!
}

type Mutation {
  createUser(email: String!, password: String!, name: String!): LoginReturnDto!
  addRole(userId: String!, role: String!): User!
  disableRole(role: String!, userId: String!): User!
  createArticle(articleInput: ArticleInput!): Article!
  updateArticle(articleInput: UpdateArticleDto!): Article!
  deleteArticle(_id: String!): Article!
  createTopic(topicInput: TopicInput!): Topic!
  updateTopic(topicInput: UpdateTopicDto!): Topic!
  deleteTopic(_id: String!): Topic!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type Query {
  user: User!
  whoami: User!
  loginRecords: [LoginRecord!]!
  login(password: String!, email: String!): LoginReturnDto!
  resetToken(refreshToken: String!, email: String!): LoginReturnDto!
  getArticle(_id: String!): Article!
  filterArticles(query: ArticleQueryInput!): SearchResult!
  getPublicArticle(_id: String!): Article!
  filterPublicArticles(query: ArticleQueryInput!): SearchResult!
  getPublicTopic(_id: String!): Topic!
  getTopic(_id: String!): Topic!
  filterTopicsPublicly(query: TopicQueryInput!): SearchResult!
  filterTopics(query: TopicQueryInput!): SearchResult!
}

union Result = Article | Topic

type Role {
  name: String!
  enabled: Boolean!
}

type SearchResult {
  results: [Result!]
  totalCount: Int!
  pageInfo: PageInfo!
}

enum SortBy {
  ASC
  DESC
}

type Subscription {
  userAdded: User!
}

type Topic {
  _id: String!
  name: String!
  description: String
  imageUrl: String
  updatedAt: DateTime!
  createdAt: DateTime!
  articles(query: ArticleQueryInput!): SearchResult
  publicArticles(query: ArticleQueryInput!): SearchResult
}

input TopicFilterInputDto {
  _id: String
}

input TopicInput {
  name: String!
  description: String
}

input TopicQueryInput {
  filter: TopicFilterInputDto = {}
  sortBy: TopicSortBy = {}
  pageNum: Float = 1
  pageSize: Float = 10
}

input TopicSortBy {
  name: SortBy
  createdAt: SortBy
}

input UpdateArticleDto {
  _id: String!
  title: String
  content: String
  isFeatured: Boolean
}

input UpdateTopicDto {
  _id: String!
  name: String
  description: String
}

type User {
  _id: String!
  name: String!
  email: String!
  lastLogin: DateTime!
  loginAttempts: Float!
  roles: [Role!]!
  loginRecords: [LoginRecord!]!
  updatedAt: DateTime!
  createdAt: DateTime!
}
